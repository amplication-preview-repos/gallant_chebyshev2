/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Performer as PrismaPerformer } from "@prisma/client";

export class PerformerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PerformerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.performer.count(args);
  }

  async performers(
    args: Prisma.PerformerFindManyArgs
  ): Promise<PrismaPerformer[]> {
    return this.prisma.performer.findMany(args);
  }
  async performer(
    args: Prisma.PerformerFindUniqueArgs
  ): Promise<PrismaPerformer | null> {
    return this.prisma.performer.findUnique(args);
  }
  async createPerformer(
    args: Prisma.PerformerCreateArgs
  ): Promise<PrismaPerformer> {
    return this.prisma.performer.create(args);
  }
  async updatePerformer(
    args: Prisma.PerformerUpdateArgs
  ): Promise<PrismaPerformer> {
    return this.prisma.performer.update(args);
  }
  async deletePerformer(
    args: Prisma.PerformerDeleteArgs
  ): Promise<PrismaPerformer> {
    return this.prisma.performer.delete(args);
  }
}
