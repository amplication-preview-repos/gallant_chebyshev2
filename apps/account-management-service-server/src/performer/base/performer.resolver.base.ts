/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Performer } from "./Performer";
import { PerformerCountArgs } from "./PerformerCountArgs";
import { PerformerFindManyArgs } from "./PerformerFindManyArgs";
import { PerformerFindUniqueArgs } from "./PerformerFindUniqueArgs";
import { CreatePerformerArgs } from "./CreatePerformerArgs";
import { UpdatePerformerArgs } from "./UpdatePerformerArgs";
import { DeletePerformerArgs } from "./DeletePerformerArgs";
import { PerformerService } from "../performer.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Performer)
export class PerformerResolverBase {
  constructor(
    protected readonly service: PerformerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Performer",
    action: "read",
    possession: "any",
  })
  async _performersMeta(
    @graphql.Args() args: PerformerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Performer])
  @nestAccessControl.UseRoles({
    resource: "Performer",
    action: "read",
    possession: "any",
  })
  async performers(
    @graphql.Args() args: PerformerFindManyArgs
  ): Promise<Performer[]> {
    return this.service.performers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Performer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Performer",
    action: "read",
    possession: "own",
  })
  async performer(
    @graphql.Args() args: PerformerFindUniqueArgs
  ): Promise<Performer | null> {
    const result = await this.service.performer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Performer)
  @nestAccessControl.UseRoles({
    resource: "Performer",
    action: "create",
    possession: "any",
  })
  async createPerformer(
    @graphql.Args() args: CreatePerformerArgs
  ): Promise<Performer> {
    return await this.service.createPerformer({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Performer)
  @nestAccessControl.UseRoles({
    resource: "Performer",
    action: "update",
    possession: "any",
  })
  async updatePerformer(
    @graphql.Args() args: UpdatePerformerArgs
  ): Promise<Performer | null> {
    try {
      return await this.service.updatePerformer({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Performer)
  @nestAccessControl.UseRoles({
    resource: "Performer",
    action: "delete",
    possession: "any",
  })
  async deletePerformer(
    @graphql.Args() args: DeletePerformerArgs
  ): Promise<Performer | null> {
    try {
      return await this.service.deletePerformer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
